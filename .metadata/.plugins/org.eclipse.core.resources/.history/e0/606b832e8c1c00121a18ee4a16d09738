package RIP;

import java.util.ArrayList;
import java.util.Enumeration;
import java.util.Hashtable;

public class InputNode implements Runnable{

	private String name;
	private int[] addresses;
	private boolean tableUpdated=false;
	String sender;
	Hashtable<Integer,LinkCost> sendertable=null;
	/*the routing table of the corresponding node */
	private  Hashtable<Integer,LinkCost> routingTable = null;
	/* list of the nodes that are linked to the current node*/
	ArrayList<String> links= null;
	
	public InputNode(String name ,int[] addresses){
		this.name=name;
		this.addresses=addresses;
		routingTable= new Hashtable<Integer,LinkCost>();
		 for (int i =0; i<addresses.length;i++){
			 routingTable.put(addresses[i], new LinkCost("local",0));
		 }
		 links=new ArrayList<String>();
	}
	
	public void addEntries(InputNode node){
		int[] destinations = node.getAddresses();
		if (!links.contains(node.getName()) || node.getName().equals(getName())){
		links.add(node.getName());
		}
			for (int i=0;i<destinations.length;i++){
				routingTable.put(destinations[i], new LinkCost(node.getName(),1));
			}
		
		}
	public void settableUpdate(boolean state){
		tableUpdated = state;
	}
	public boolean gettableUpdate(){
		return tableUpdated;
	}
	public Hashtable<Integer, LinkCost> getRoutingTable(){
		return routingTable;
	}
	public Hashtable<Integer,LinkCost> copyRoutingTable(){
		Hashtable<Integer,LinkCost> sendingTable = new Hashtable<Integer,LinkCost>(routingTable.size());
		for (Enumeration<Integer> e = routingTable.keys(); e.hasMoreElements();){
			 Integer key = e.nextElement();
			 sendingTable.put(key, new LinkCost(routingTable.get(key)));
	}
		return sendingTable;
	}
	public void receiveMsgFrom(String sender, Hashtable<Integer,LinkCost>senderTable){
		this.sender=sender;
		this.sendertable=new Hashtable<Integer,LinkCost>(senderTable);
	}
	public void receiveTable(){
		
		
		
		/*RIP routing protocol */
		for (Enumeration<Integer> list= sendertable.keys(); list.hasMoreElements();){
		    Integer address= list.nextElement();
			LinkCost row = sendertable.get(address);
			 if (!row.link.equals(sender)){
				
				 row.Cost= row.Cost+1;
				 row.link= sender;
				 
				  if (!routingTable.containsKey(address)){
					  routingTable.put(address, row);
					  settableUpdate(true);
					  
				  }else{
					  		for (Enumeration<Integer> local_list = routingTable.keys(); local_list.hasMoreElements();){
						         Integer destination = local_list.nextElement();
						    	 LinkCost destEntry= routingTable.get(destination);
						    	 if (destination==address ){
						    		 if (row.Cost< destEntry.Cost|| row.link.equals(destEntry.link)){
						    			  destEntry= row;
						    			  settableUpdate(true);
						    		 }
						    	 }
					  			}
					  }
				
			 }
		}
		
		
		
		
	}
	
	public String getName(){
		return name;
		
	}
	public int[] getAddresses(){
		return addresses;
	}
	
	public  class LinkCost{
		String link;
		int Cost;
		public LinkCost(String link,int cost){
		   this.link=link;
		   this.Cost=cost;
		}
		
		public LinkCost(LinkCost lc)
		{
			this.link=lc.link;
			this.Cost= lc.Cost;
		}
	}

	@Override
	public void run() {
		String info="";
		Enumeration<Integer> e= sendertable.keys();
		while (e.hasMoreElements()){
			Integer address= (Integer) e.nextElement();
			info = info.concat(" ( "+address+ "|" + sendertable.get(address).link +"|"+ sendertable.get(address).Cost + ") ");
		}
		System.out.println(" recieve "+ sender + " "+ this.getName() + info);
		receiveTable();
		
		
		Enumeration<Integer> e2= routingTable.keys();
		String inform= this.getName();
		System.out.println(getName()+ "has been updated:"+ gettableUpdate());
		while (e2.hasMoreElements()){
			Integer address= (Integer) e2.nextElement();
			inform = inform.concat(" ( "+address+ "|" + routingTable.get(address).link +"|"+ routingTable.get(address).Cost + ") ");
		}
		System.out.println(inform);
		
		
		if (gettableUpdate()){
			settableUpdate(false);
			InputCommand.sendProcess(getName());
			
		
		}else{
			System.out.println(getName() + " ' thread is finished");
		
		}
		
		// TODO Auto-generated method stub
		
	}
	
	
	
}

